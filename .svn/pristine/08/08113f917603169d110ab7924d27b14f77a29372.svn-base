package com.example.tingpan.grpproject;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.nfc.Tag;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import android.widget.TextView;

import org.w3c.dom.Text;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;

/**
 * Created by TingPan on 2/11/15.
 */
public class NodeService extends Service {
    private static final String NODE_NAME = "node";
    private static final String TAG = "node-service";
    private static final String SERVER_NAME = "server.js";

    enum NodeState {NEW, EXTRACTING, FAILED, READY, STARTING, RUNNING, STOPPING};
    private NodeState nodeState = NodeState.NEW;
    private Process nodeProcess;

    private File fileDir;
    private File nodeApp;
    private File serverScript;
    private Context callActivity;


    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    public NodeService(Context callActivity){
        super();
        this.callActivity = callActivity;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        fileDir = getFilesDir();
        nodeApp = new File(fileDir, NODE_NAME);
        serverScript = new File(fileDir, SERVER_NAME);

        if (!nodeApp.exists()) {
            Log.e(TAG, NODE_NAME + " not exist");
            nodeState = NodeState.EXTRACTING;
        }
        if (!serverScript.exists()) {
            Log.e(TAG, SERVER_NAME + " not exist");
            nodeState = NodeState.EXTRACTING;
        }
        checkNode();

    }


    private void checkNode(){
        if(!nodeApp.exists()||!serverScript.exists()){
            nodeState = NodeState.FAILED;
            Log.e(TAG,"File does not exist");
        }
        else {
            if (!nodeApp.canExecute()) {
                if(!nodeApp.setExecutable(true,false)){
                    nodeState = NodeState.FAILED;
                    Log.e(TAG,"Fail to set executable");
                }
                else {
                    Log.d(TAG,"Set executable to " + nodeApp);
                }
            }
        }
        if (nodeState!=NodeState.FAILED){
            ProcessBuilder versionCheck = new ProcessBuilder(nodeApp.getAbsolutePath(),"--version");
            versionCheck.directory(getFilesDir());
            versionCheck.redirectErrorStream(true);
            try {
                nodeProcess = versionCheck.start();
                BufferedReader reader = new BufferedReader(new InputStreamReader(nodeProcess.getInputStream(), "UTF-8"));
                String line = reader.readLine();
                Log.d(TAG,"Node Process: "+line);
                if(!line.equals("v0.11.12"))
                    nodeState = NodeState.FAILED;
            } catch (Exception e) {
                nodeState = NodeState.FAILED;
                Log.w(TAG,"Error reading from node: "+e);
            }
            nodeState = NodeState.READY;
        }
    }


    private void startNode() {
        if (nodeState != NodeState.READY) {
            Log.e(TAG, "Node is not ready yet!");
        }
    }


    private class ExtractFileTask extends AsyncTask<String, Integer, Long> {
        @Override
        //copy the file to the internal memory (the app folder).
        protected Long doInBackground(String[] files) {
            String file = files[0];
            Log.d(TAG, "Extracting " + file + "...");
            try {
                InputStream in = NodeService.this.getAssets().open(file);
                OutputStream out = new FileOutputStream(nodeApp);
                byte buffer[] = new byte[100000];
                int len = 0;
                while(true) {
                    int count = in.read(buffer);
                    if (count<0)
                        break;
                    out.write(buffer,0,count);
                    len += count;
                }
                in.close();
                out.close();
                Log.d(TAG,"Extracted "+len+" bytes to "+ nodeApp);

                //set executable for the file.
                if(!nodeApp.canExecute()){
                    if(!nodeApp.setExecutable(true,false)){
                        Log.e(TAG,"Fail to set executable");
                    }
                    else {
                        Log.d(TAG,"Set executable to " + nodeApp);
                    }
                }
                else {
                    Log.d(TAG,"Already executable " + nodeApp);
                }
            } catch (IOException e) {
                    Log.e(TAG,"Error to copy "+ nodeApp + ":"+ e);
                    return null;
            }
            return null;
        }
    }
}