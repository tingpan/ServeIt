package com.example.tingpan.grpproject;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;

/**
 * Created by TingPan on 2/11/15.
 */
public class NodeService extends Service {
    private static final String NODE_NAME = "node";
    private static final String TAG = "node-service";
    private static final String SERVER_NAME = "server.js";
    private static final NodeService NODE_SERVICE= new NodeService();
    private MyBinder myBinder = new MyBinder();
    enum NodeState {NEW, EXTRACTING, FAILED, READY, STARTING, RUNNING, STOPPING};

    private static NodeState nodeState = NodeState.NEW;
    private Process nodeProcess;

    private File fileDir;
    private File nodeApp;
    private File serverScript;
    private Context callActivity;
    private ArrayList<File> fileToExtract = new ArrayList<>();
    ExtractFileTask task = new ExtractFileTask();


    @Override
    public IBinder onBind(Intent intent) {
        return myBinder;
    }

    private class MyBinder extends Binder {
        public void startNode(){
            Log.d(TAG,"Node Starting...");
        }
    }

    @Override
    public void onCreate() {
        super.onCreate();
        fileDir = getFilesDir();
        nodeApp = new File(fileDir, NODE_NAME);
        serverScript = new File(fileDir, SERVER_NAME);
        if (!nodeApp.exists()) {
            Log.e(TAG, NODE_NAME + " not exist");
            nodeState = NodeState.EXTRACTING;
            fileToExtract.add(nodeApp);
        }
        if (!serverScript.exists()) {
            Log.e(TAG, SERVER_NAME + " not exist");
            nodeState = NodeState.EXTRACTING;
            fileToExtract.add(serverScript);
        }
        task.execute();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId){
        return START_STICKY;
    }

    @Override
    public void onDestroy(){
        super.onDestroy();
    }


    private void checkNode(){
        if(!nodeApp.exists()||!serverScript.exists()){
            nodeState = NodeState.FAILED;
            Log.e(TAG,"File does not exist");
        }
        else {
            if (!nodeApp.canExecute()) {
                if(!nodeApp.setExecutable(true,false)){
                    nodeState = NodeState.FAILED;
                    Log.e(TAG,"Fail to set executable");
                }
                else {
                    Log.d(TAG,"Set executable to " + nodeApp);
                }
            }
        }
        //Do version check
        if (nodeState!=NodeState.FAILED){
            nodeState = NodeState.READY;
            ProcessBuilder versionCheck = new ProcessBuilder(nodeApp.getAbsolutePath(),"--version");
            versionCheck.directory(fileDir);
            versionCheck.redirectErrorStream(true); //put the error info to standard output.
            try {
                nodeProcess = versionCheck.start();
                BufferedReader reader = new BufferedReader(new InputStreamReader(nodeProcess.getInputStream(), "UTF-8"));
                String line = reader.readLine();
                Log.d(TAG,"Node Process: "+line);
                if(!line.equals("v0.11.12"))
                    nodeState = NodeState.FAILED;
                    Log.e(TAG,"Node file is not correct");
            } catch (Exception e) {
                nodeState = NodeState.FAILED;
                Log.w(TAG,"Error reading from node: "+e);
            }
        }
    }


//    private void startNode() {
//        if (nodeState != NodeState.READY) {
//            Log.e(TAG, "Node is not ready yet!");
//        }
//    }


    private class ExtractFileTask extends AsyncTask<String, Integer, Long> {
        @Override
        //copy the file to the internal memory (the app folder).
        protected Long doInBackground(String... params) {
           for (File file : fileToExtract){
               extractFile(file);
           }
           checkNode();
           return null;
        }

        @Override
        protected void onProgressUpdate(Integer... progress){
            Log.d(TAG,"NODE-PROGRESS: " + progress[0]);
            Intent intent = new Intent();
            intent.putExtra("progress",progress[0]);
            intent.setAction("com.node.progress");
            sendBroadcast(intent);
        }

        private void extractFile(File file){
            publishProgress(0);
            Log.d(TAG, "Extracting " + file + "...");
            try {
                InputStream in = NodeService.this.getAssets().open(file.getName());
                int total = in.available();

                OutputStream out = new FileOutputStream(file);
                byte buffer[] = new byte[100000];
                int len = 0;
                while(true) {
                    int count = in.read(buffer);
                    if (count<0)
                        break;
                    out.write(buffer,0,count);
                    len += count;
                    publishProgress((int) ((len * 1.0 / total) * 100));
                }
                in.close();
                out.close();
                Log.d(TAG,"Extracted "+len+" bytes to "+ file);
            } catch (IOException e) {
                Log.e(TAG,"Error to copy "+ file + ":"+ e);
            }
        }
    }



}