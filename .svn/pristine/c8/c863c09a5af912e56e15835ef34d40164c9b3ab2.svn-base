package com.example.tingpan.grpproject;

import android.app.Service;
import android.content.Intent;
import android.content.res.AssetManager;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.Environment;
import android.os.IBinder;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by TingPan on 2/12/15.
 */
public class GameFileStore extends Service{
    private AssetManager assetManager;
    private File rootDir;
    private static final String SAMPLE_CODE = "helloWorld";
    private static final String ROOT_DIR_NAME = "serverIt";
    private static final String TAG = "FileStore";
    public static final String EVENT_ACTION = "com.file.event";
    public static final String PROGRESS_ACTION = "com.file.progress";
    private static FileStoreStates fileStoreState;
    enum FileStoreStates {NEW,INIT,READY,FAILED}
    private MyBinder myBinder = new MyBinder();
    private Intent broadcastIntent = new Intent();

    @Override
    public IBinder onBind(Intent intent) {
        return myBinder;
    }

    @Override
    public void onCreate(){
        super.onCreate();
        Log.d(TAG,"File Service is Created");
        assetManager = getAssets();
        rootDir = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), ROOT_DIR_NAME);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId){
        fileStoreState = FileStoreStates.NEW;
        Log.d(TAG,"File Service is start");
        if (!rootDir.exists()||!rootDir.isDirectory()){
            if (!rootDir.mkdir()){
                Log.e(TAG, "can not create folder here");
                sendMyBroadcast(PROGRESS_ACTION,"can not create "+rootDir,100);
            }else{
                fileStoreState = FileStoreStates.INIT;
                Log.d(TAG, "Init root folder" + rootDir.getAbsolutePath());
                sendMyBroadcast(PROGRESS_ACTION,"create "+rootDir,100);
            }
        }
        PreLoading task = new PreLoading();
        task.execute();
        return START_STICKY;
    }

    private class PreLoading extends AsyncTask<String, Integer, Long>{

        @Override
        protected Long doInBackground(String... folderNames) {
            if (fileStoreState == FileStoreStates.INIT) {
                extractFolder(SAMPLE_CODE);
            }
            return null;
        }

        private void extractFolder(String folderName){
            try {
                String[] filesInside = assetManager.list(folderName);
                if(filesInside.length==0){
                    Log.d(TAG, "find file" + folderName);
                    extractFile(folderName);
                }else{
                    File fileDir = new File(rootDir,folderName);
                    if(!fileDir.exists()||!fileDir.isDirectory()){
                        if(!fileDir.mkdir()){
                            Log.e(TAG,"Error with make new folder "+folderName);
                            sendMyBroadcast(PROGRESS_ACTION, "Error with make new folder "+folderName, 100);
                            return;
                        }
                        Log.d(TAG,"Make new folder "+folderName);
                    }else{
                        Log.d(TAG,"Folder exists "+folderName);
                    }
                    for(String eachFile:filesInside){
                        extractFolder(folderName + "/" + eachFile);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void extractFile(String fileName) {
            sendMyBroadcast(PROGRESS_ACTION, "Extracting: " + fileName, 0);
            Log.d(TAG, "Extracting " + fileName + "...");
            try {
                InputStream in = assetManager.open(fileName);
                int total = in.available();
                OutputStream out = new FileOutputStream(new File(rootDir,fileName));
                byte buffer[] = new byte[100000];
                int len = 0;
                while (true) {
                    int count = in.read(buffer);
                    if (count < 0)
                        break;
                    out.write(buffer, 0, count);
                    len += count;
                    int progress = (int) ((len * 1.0 / total) * 100);
                    Log.d(TAG,"extract:"+progress);
                    sendMyBroadcast(PROGRESS_ACTION, "Extracting: " + fileName, progress);
                }
                in.close();
                out.close();
                Log.d(TAG, "Extracted " + len + " bytes to " + fileName);
            } catch (IOException e) {
                sendMyBroadcast(PROGRESS_ACTION, "can not Extracting: " + fileName, 100);
                Log.e(TAG, "Error to copy " + fileName + ":" + e);
            }
        }

        @Override
        protected void onPostExecute(Long aLong) {
            super.onPostExecute(aLong);
            if(rootDir.exists()&&rootDir.isDirectory()&&rootDir.canExecute()){
                fileStoreState = FileStoreStates.READY;
                sendMyBroadcast(PROGRESS_ACTION,"Check all files",100);
                Log.d(TAG,"FileStore is correct");
            }else {
                fileStoreState = FileStoreStates.FAILED;
                sendMyBroadcast(PROGRESS_ACTION,"Files are not correct",100);
                Log.e(TAG,"FileStore is missing");
            }
            Log.d(TAG, "file service pre-loading is finish, status: " + fileStoreState);
            sendMyBroadcast(EVENT_ACTION, "", 0);
        }
    }

    class MyBinder extends Binder{

        public List<Map<String,Object>> readFile(){
            List<Map<String,Object>> fileList = new ArrayList<>();
            for(String fileName : rootDir.list()){
                File gameDir = new File(rootDir,fileName);
                if(gameDir.exists()&&gameDir.isDirectory()){
                    Log.d(TAG,"read " + gameDir);
                    Date lastModified = new Date (gameDir.lastModified());
                    Map <String,Object> gameItem = new HashMap<>();
                    gameItem.put("title",gameDir.getName());
                    gameItem.put("date",lastModified.toString());
                    fileList.add(gameItem);
                }
            }
            return fileList;
        }

        public boolean downloadFile(){
            return false;
        }
        public boolean importFile(){
            return false;
        }
        public boolean deleteFile(){
            return false;
        }
    }

    private void sendMyBroadcast(String action, String event, int progress) {
        if (!action.equals(EVENT_ACTION)) {
            broadcastIntent.setAction(action);
            broadcastIntent.putExtra("event", event);
            broadcastIntent.putExtra("progress", progress);
        } else {
            broadcastIntent.setAction(action);
        }
        sendBroadcast(broadcastIntent);
    }

}
